{"version":3,"sources":["api/products.ts","api/colors.ts","components/TodoInfo/TodoInfo.tsx","components/TodoSelect/TodoSelect.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","title","selected","colorId","color","TodoInfo","React","memo","product","colors","onDelete","onRename","onSelect","currentColor","useState","renameTitle","setRenameTitle","toString","renameColor","setRenameColor","isEdited","setEdited","titleTouch","setTitleTouch","colorTouch","setColorTouch","isTitleTouched","length","isColorTouched","useEffect","className","onSubmit","event","preventDefault","Number","prevState","method","action","classNames","type","value","onChange","target","onBlur","maxLength","disabled","map","currColor","onClick","checked","htmlFor","style","TodoSelect","products","changeAll","fitleredProducts","setFilterToProducts","filter","TodoList","App","productsFromServer","setProducts","todoTitle","setTodoTitle","todoColor","setTodoColor","productTouch","findColorById","colorsFromServer","find","undefined","useMemo","newProduct","Math","max","placeholder","productId","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0539808a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    title: 'Apple',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 2,\n    title: 'Orange',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 3,\n    title: 'Steak',\n    selected: false,\n    colorId: 2,\n  },\n  {\n    id: 4,\n    title: 'Potato',\n    selected: false,\n    colorId: 3,\n  },\n  {\n    id: 5,\n    title: 'Stawberry',\n    selected: false,\n    colorId: 2,\n  },\n];\n","export default [\n  {\n    id: 1,\n    color: 'red',\n  },\n  {\n    id: 2,\n    color: 'blue',\n  },\n  {\n    id: 3,\n    color: 'green',\n  },\n];\n","import React, { useState, useEffect } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoInfo.scss';\n\nimport { Product } from '../../types/Product';\nimport { Color } from '../../types/Color';\n\ntype Props = {\n  product: Product;\n  colors: Color[];\n  onDelete: (productId: number) => void;\n  onRename: (productId: number, title: string, colorId: number) => void;\n  onSelect: (productId: number, selected: boolean) => void;\n};\n\nexport const TodoInfo: React.FC<Props> = React.memo(\n  ({\n    product,\n    colors,\n    onDelete,\n    onRename,\n    onSelect,\n  }) => {\n    const { currentColor, selected } = product;\n\n    const [renameTitle, setRenameTitle] = useState<string>(product.title);\n    const [renameColor, setRenameColor] = useState<string>(\n      product.colorId.toString(),\n    );\n    const [isEdited, setEdited] = useState(false);\n\n    const [titleTouch, setTitleTouch] = useState(false);\n    const [colorTouch, setColorTouch] = useState(false);\n\n    const isTitleTouched = titleTouch && renameTitle.length < 1;\n    const isColorTouched = colorTouch && renameColor.length < 1;\n\n    const resetAllChanges = () => {\n      setRenameTitle('');\n      setRenameColor('');\n    };\n\n    const onRenameSubmit = (event: React.FormEvent): void => {\n      event.preventDefault();\n\n      if (renameTitle.length > 0\n        && renameColor.length > 0) {\n        onRename(product.id, renameTitle, Number(renameColor));\n        setEdited(prevState => !prevState);\n\n        resetAllChanges();\n        setTitleTouch(false);\n        setColorTouch(false);\n      } else {\n        setTitleTouch(true);\n        setColorTouch(true);\n      }\n    };\n\n    const addRenameTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n\n      setRenameTitle(value);\n    };\n\n    const addRenameColor = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      const { value } = event.target;\n\n      setRenameColor(value);\n    };\n\n    const changeSelect = () => {\n      onSelect(product.id, !selected);\n    };\n\n    useEffect(() => {\n      setRenameTitle(product.title);\n      setRenameColor(product.colorId.toString());\n    }, [product]);\n\n    return (\n      <article\n        data-id={product.id}\n        className=\"TodoInfo\"\n        key={product.id}\n      >\n\n        {\n          !isEdited\n            ? (\n              <section className=\"TodoInfo-section\">\n                <section className=\"TodoInfo__checkbox-section\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"btn-check\"\n                    id={`$btn-check-${product.id}-outlined`}\n                    onClick={changeSelect}\n                    checked={selected}\n                  />\n                  <label\n                    className=\"btn btn-outline-success btn-success-check\"\n                    htmlFor={`$btn-check-${product.id}-outlined`}\n                  >\n                    &#10003;\n                  </label>\n                  <h2\n                    className={classNames(\n                      'TodoInfo__title',\n                      {\n                        'TodoInfo__title-selected': selected,\n                      },\n                    )}\n                    style={currentColor && { color: currentColor.color }}\n                  >\n                    {product.title}\n                  </h2>\n                </section>\n                <section>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => onDelete(product.id)}\n                  >\n                    Delete\n                  </button>\n                  {\n                    !selected && (\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-outline-warning\"\n                        onClick={() => setEdited((prevState => !prevState))}\n                      >\n                        Edit\n                      </button>\n                    )\n                  }\n                </section>\n              </section>\n            ) : (\n              <form\n                onSubmit={onRenameSubmit}\n                method=\"GET\"\n                action=\"/api/users\"\n                className=\"TodoInfo-submitForm\"\n              >\n                <article className=\"TodoInfo-edit\">\n                  <section className=\"TodoInfo-edit__section\">\n                    <input\n                      className={classNames(\n                        'TodoInfo-edit__input',\n                        'form-control',\n                        {\n                          'error-border': isTitleTouched,\n                        },\n                      )}\n                      type=\"text\"\n                      value={renameTitle}\n                      onChange={addRenameTitle}\n                      onBlur={() => setTitleTouch(true)}\n                      maxLength={15}\n                    />\n\n                    <select\n                      className={classNames(\n                        'TodoInfo-edit__select',\n                        'form-control',\n                        {\n                          'error-border': isColorTouched,\n                        },\n                      )}\n                      value={renameColor}\n                      onChange={addRenameColor}\n                      onBlur={() => setColorTouch(true)}\n                    >\n                      <option\n                        value=\"\"\n                        disabled\n                      >\n                        Choose a color\n                      </option>\n                      {colors.map((currColor) => (\n                        <option\n                          key={currColor.id}\n                          value={currColor.id}\n                        >\n                          {currColor.color}\n                        </option>\n                      ))}\n                    </select>\n                  </section>\n\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-success btn-success-submit\"\n                  >\n                    Done\n                  </button>\n                </article>\n              </form>\n            )\n        }\n      </article>\n    );\n  },\n);\n","import React, { useState, useEffect } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoSelect.scss';\n\nimport { Product } from '../../types/Product';\n\ntype Props = {\n  products: Product[];\n  changeAll: (selected: boolean) => void;\n};\n\nexport const TodoSelect: React.FC<Props> = ({\n  products,\n  changeAll,\n}) => {\n  const [fitleredProducts, setFilterToProducts] = useState(products);\n\n  useEffect(() => {\n    setFilterToProducts(products.filter(\n      (product) => product.selected === true,\n    ));\n  }, [products]);\n\n  return (\n    <article className=\"TodoSelect\">\n      <section>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-success\"\n          onClick={() => changeAll(true)}\n        >\n          Select All\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger\"\n          onClick={() => changeAll(false)}\n        >\n          Remove select\n        </button>\n      </section>\n\n      <p\n        className={classNames(\n          'TodoSelect__title',\n          {\n            'TodoSelect__title--selected': fitleredProducts.length,\n          },\n        )}\n      >\n        {`Selected items: ${fitleredProducts.length}`}\n      </p>\n    </article>\n\n  );\n};\n","import React from 'react';\n\nimport './TodoList.scss';\n\nimport { Product } from '../../types/Product';\nimport { Color } from '../../types/Color';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoSelect } from '../TodoSelect/TodoSelect';\n\ntype Props = {\n  products: Product[];\n  colors: Color[];\n  onDelete: (productId: number) => void;\n  onRename: (productId: number, title: string, colorId: number) => void;\n  onSelect: (productId: number, selected: boolean) => void;\n  changeAll: (selected: boolean) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    products,\n    colors,\n    onDelete,\n    onRename,\n    onSelect,\n    changeAll,\n  }) => {\n    return (\n      <section className=\"TodoList\">\n        <TodoSelect\n          products={products}\n          changeAll={changeAll}\n        />\n        {products.map((product) => (\n          <TodoInfo\n            key={product.id}\n            product={product}\n            colors={colors}\n            onDelete={onDelete}\n            onRename={onRename}\n            onSelect={onSelect}\n          />\n        ))}\n      </section>\n    );\n  },\n);\n","import React, { useState, useMemo } from 'react';\n\nimport './App.scss';\n\n// import usersFromServer from './api/users';\n// import todosFromServer from './api/todos';\nimport productsFromServer from './api/products';\nimport colorsFromServer from './api/colors';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { Product } from './types/Product';\nimport { Color } from './types/Color';\n\nexport const App: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>(productsFromServer);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todoColor, setTodoColor] = useState('');\n  const [titleTouch, setTitleTouch] = useState(false);\n  const [productTouch, setColorTouch] = useState(false);\n\n  const isTitleTouched = titleTouch && todoTitle.length < 1;\n  const isColorTouched = productTouch && todoColor.length < 1;\n\n  const findColorById = (colorId: number): Color | undefined => {\n    const foundColor = colorsFromServer.find((color) => (\n      color.id === colorId\n    ));\n\n    return foundColor || undefined;\n  };\n\n  const addTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTodoTitle(value);\n  };\n\n  const addTodoProduct = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setTodoColor(value);\n  };\n\n  const removeTodoChanges = () => {\n    setTodoTitle('');\n    setTodoColor('');\n  };\n\n  const onAdd = (event: React.FormEvent): void => {\n    event.preventDefault();\n\n    const newProduct = {\n      id: Math.max(...products.map((product) => product.id)) + 1,\n      title: todoTitle,\n      selected: false,\n      colorId: Number(todoColor),\n      color: findColorById(Number(todoColor)),\n    };\n\n    if (todoTitle.length > 0 && todoColor.length > 0) {\n      setProducts((prevState: Product[]) => (\n        [...prevState, newProduct]\n      ));\n\n      removeTodoChanges();\n\n      setTitleTouch(false);\n      setColorTouch(false);\n    } else {\n      setTitleTouch(true);\n      setColorTouch(true);\n    }\n  };\n\n  const onDelete = (productId: number): void => {\n    setProducts((prevState) => prevState.filter((state) => (\n      state.id !== productId\n    )));\n  };\n\n  const onRename = (\n    productId: number,\n    title: string,\n    colorId: number,\n  ): void => {\n    setProducts((prevState) => prevState.map((product) => {\n      if (product.id !== productId) {\n        return product;\n      }\n\n      return { ...product, title, colorId };\n    }));\n  };\n\n  const onSelect = (productId: number, selected: boolean): void => {\n    setProducts((prevState: Product[]) => prevState.map(\n      (product) => {\n        if (product.id !== productId) {\n          return product;\n        }\n\n        return { ...product, selected };\n      },\n    ));\n  };\n\n  const changeAllProducts = (selected: boolean) => {\n    setProducts((prevState: Product[]) => prevState.map(\n      (product: Product) => (\n        {\n          ...product,\n          selected,\n        }\n      ),\n    ));\n  };\n\n  const fitleredProducts = useMemo(() => (\n    products.map((product: Product): Product => ({\n      ...product,\n      currentColor: findColorById(product.colorId),\n    }))\n  ), [products]);\n\n  return (\n    <div className=\"App\">\n      <form\n        className=\"App__form form\"\n        onSubmit={onAdd}\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <h1\n          className=\"App__title\"\n        >\n          Add todo form\n        </h1>\n\n        {isTitleTouched && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n        <div className=\"field\">\n          <input\n            className=\"form__textInput form-control\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={addTodoTitle}\n            onBlur={() => setTitleTouch(true)}\n            placeholder=\"Enter a title\"\n            maxLength={15}\n          />\n        </div>\n\n        {(isColorTouched) && (\n          <span className=\"error\">Please choose a product</span>\n        )}\n\n        <div className=\"field\">\n          <select\n            className=\"form__selectColor form-control\"\n            data-cy=\"userSelect\"\n            value={todoColor}\n            onChange={addTodoProduct}\n            onBlur={() => setColorTouch(true)}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Choose a product\n            </option>\n\n            {colorsFromServer.map((currentColor) => (\n              <option\n                key={currentColor.id}\n                value={currentColor.id}\n              >\n                {currentColor.color}\n              </option>\n            ))}\n\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"btn btn-warning btn-todoAdd\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        products={fitleredProducts}\n        colors={colorsFromServer}\n        onDelete={onDelete}\n        onRename={onRename}\n        onSelect={onSelect}\n        changeAll={changeAllProducts}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}