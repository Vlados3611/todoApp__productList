{"version":3,"sources":["App.tsx","api/products.ts","api/colors.ts","components/TodoInfo/TodoInfo.tsx","TodoFilter/TodoFilter.tsx","components/TodoSelect/TodoSelect.tsx","components/TodoList/TodoList.tsx","index.tsx"],"names":["SortType","id","title","selected","colorId","color","TodoInfo","React","memo","product","colors","onDelete","onRename","onSelect","currentColor","useState","renameTitle","setRenameTitle","toString","renameColor","setRenameColor","isEdited","setEdited","titleTouch","setTitleTouch","colorTouch","setColorTouch","isTitleTouched","length","isColorTouched","useEffect","className","onSubmit","event","preventDefault","Number","prevState","method","action","classNames","type","value","onChange","target","onBlur","maxLength","disabled","map","currColor","onClick","checked","htmlFor","style","TodoFilter","products","sortBySelect","showAll","filterToggler","switchFilterToggler","touchedSelect","setTouchSelect","productList","filter","TodoSelect","changeAll","productsList","setProductToList","fitleredProductsBySelect","TodoList","App","productsFromServer","setProducts","todoTitle","setTodoTitle","todoColor","setTodoColor","productTouch","NONE","sortType","setSortType","findColorById","colorsFromServer","find","undefined","fitleredProducts","sortBy","sortedProductList","SELECTED","getFilteredProducts","newProduct","Math","max","placeholder","productId","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df0ebfa4.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport './App.scss';\n\n// import usersFromServer from './api/users';\n// import todosFromServer from './api/todos';\nimport productsFromServer from './api/products';\nimport colorsFromServer from './api/colors';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { Product } from './types/Product';\nimport { Color } from './types/Color';\n\nenum SortType {\n  SELECTED,\n  NONE,\n}\n\nexport const App: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>(productsFromServer);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todoColor, setTodoColor] = useState('');\n  const [titleTouch, setTitleTouch] = useState(false);\n  const [productTouch, setColorTouch] = useState(false);\n\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const isTitleTouched = titleTouch && todoTitle.length < 1;\n  const isColorTouched = productTouch && todoColor.length < 1;\n\n  const findColorById = (colorId: number): Color | undefined => {\n    const foundColor = colorsFromServer.find((color) => (\n      color.id === colorId\n    ));\n\n    return foundColor || undefined;\n  };\n\n  const addTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n  };\n\n  const addTodoColor = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodoColor(event.target.value);\n  };\n\n  const removeTodoChanges = () => {\n    setTodoTitle('');\n    setTodoColor('');\n  };\n\n  const onAdd = (event: React.FormEvent): void => {\n    event.preventDefault();\n\n    const newProduct = {\n      id: Math.max(...products.map((product) => product.id)) + 1,\n      title: todoTitle,\n      selected: false,\n      colorId: Number(todoColor),\n      color: findColorById(Number(todoColor)),\n    };\n\n    if (todoTitle.length > 0 && todoColor.length > 0) {\n      setProducts((prevState: Product[]) => (\n        [...prevState, newProduct]\n      ));\n\n      removeTodoChanges();\n\n      setTitleTouch(false);\n      setColorTouch(false);\n    } else {\n      setTitleTouch(true);\n      setColorTouch(true);\n    }\n  };\n\n  const onDelete = (productId: number): void => {\n    setProducts((prevState) => prevState.filter((state) => (\n      state.id !== productId\n    )));\n  };\n\n  const onRename = (\n    productId: number,\n    title: string,\n    colorId: number,\n  ): void => {\n    setProducts((prevState) => prevState.map((product) => {\n      if (product.id !== productId) {\n        return product;\n      }\n\n      return { ...product, title, colorId };\n    }));\n  };\n\n  const onSelect = (productId: number, selected: boolean): void => {\n    setProducts((prevState: Product[]) => prevState.map(\n      (product) => {\n        if (product.id !== productId) {\n          return product;\n        }\n\n        return { ...product, selected };\n      },\n    ));\n  };\n\n  const changeAllProducts = (selected: boolean) => {\n    setProducts((prevState: Product[]) => prevState.map(\n      (product: Product) => (\n        {\n          ...product,\n          selected,\n        }\n      ),\n    ));\n  };\n\n  const getFilteredProducts = (\n    productList: Product[],\n    sortBy: SortType,\n  ): Product[] => {\n    const sortedProductList = productList.map((product: Product) => ({\n      ...product,\n      currentColor: findColorById(product.colorId),\n    }));\n\n    switch (sortBy) {\n      case SortType.SELECTED:\n        return sortedProductList.filter((product: Product) => (\n          product.selected\n        ));\n\n      default:\n        return sortedProductList;\n    }\n  };\n\n  const sortBySelect = () => {\n    setSortType(SortType.SELECTED);\n  };\n\n  const showAll = () => {\n    setSortType(SortType.NONE);\n  };\n\n  const fitleredProducts = getFilteredProducts(products, sortType);\n\n  return (\n    <div className=\"App\">\n      <form\n        className=\"App__form form\"\n        onSubmit={onAdd}\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <h1\n          className=\"App__title\"\n        >\n          Add todo form\n        </h1>\n\n        {isTitleTouched && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n        <div className=\"field\">\n          <input\n            className={classNames(\n              'form__textInput',\n              'form-control',\n              {\n                'error-border': isTitleTouched,\n              },\n            )}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={addTodoTitle}\n            onBlur={() => setTitleTouch(true)}\n            placeholder=\"Enter a title\"\n            maxLength={15}\n          />\n        </div>\n\n        {(isColorTouched) && (\n          <span className=\"error\">Please choose a color</span>\n        )}\n\n        <div className=\"field\">\n          <select\n            className={classNames(\n              'form__selectColor',\n              'form-control',\n              {\n                'error-border': isColorTouched,\n              },\n            )}\n            data-cy=\"userSelect\"\n            value={todoColor}\n            onChange={addTodoColor}\n            onBlur={() => setColorTouch(true)}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Choose a color\n            </option>\n\n            {colorsFromServer.map((currentColor) => (\n              <option\n                key={currentColor.id}\n                value={currentColor.id}\n              >\n                {currentColor.color}\n              </option>\n            ))}\n\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"btn btn-warning btn-todoAdd\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        products={fitleredProducts}\n        colors={colorsFromServer}\n        onDelete={onDelete}\n        onRename={onRename}\n        onSelect={onSelect}\n        changeAll={changeAllProducts}\n        sortBySelect={sortBySelect}\n        showAll={showAll}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'Apple',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 2,\n    title: 'Orange',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 3,\n    title: 'Steak',\n    selected: false,\n    colorId: 2,\n  },\n  {\n    id: 4,\n    title: 'Potato',\n    selected: false,\n    colorId: 3,\n  },\n  {\n    id: 5,\n    title: 'Stawberry',\n    selected: false,\n    colorId: 2,\n  },\n];\n","export default [\n  {\n    id: 1,\n    color: 'red',\n  },\n  {\n    id: 2,\n    color: 'blue',\n  },\n  {\n    id: 3,\n    color: 'green',\n  },\n];\n","import React, { useState, useEffect } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoInfo.scss';\n\nimport { Product } from '../../types/Product';\nimport { Color } from '../../types/Color';\n\ntype Props = {\n  product: Product;\n  colors: Color[];\n  onDelete: (productId: number) => void;\n  onRename: (productId: number, title: string, colorId: number) => void;\n  onSelect: (productId: number, selected: boolean) => void;\n};\n\nexport const TodoInfo: React.FC<Props> = React.memo(\n  ({\n    product,\n    colors,\n    onDelete,\n    onRename,\n    onSelect,\n  }) => {\n    const { currentColor, selected } = product;\n\n    const [renameTitle, setRenameTitle] = useState<string>(product.title);\n    const [renameColor, setRenameColor] = useState<string>(\n      product.colorId.toString(),\n    );\n    const [isEdited, setEdited] = useState(false);\n\n    const [titleTouch, setTitleTouch] = useState(false);\n    const [colorTouch, setColorTouch] = useState(false);\n\n    const isTitleTouched = titleTouch && renameTitle.length < 1;\n    const isColorTouched = colorTouch && renameColor.length < 1;\n\n    const resetAllChanges = () => {\n      setRenameTitle('');\n      setRenameColor('');\n    };\n\n    const onRenameSubmit = (event: React.FormEvent): void => {\n      event.preventDefault();\n\n      if (renameTitle.length > 0\n        && renameColor.length > 0) {\n        onRename(product.id, renameTitle, Number(renameColor));\n        setEdited(prevState => !prevState);\n\n        resetAllChanges();\n        setTitleTouch(false);\n        setColorTouch(false);\n      } else {\n        setTitleTouch(true);\n        setColorTouch(true);\n      }\n    };\n\n    const addRenameTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setRenameTitle(event.target.value);\n    };\n\n    const addRenameColor = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setRenameColor(event.target.value);\n    };\n\n    const changeSelect = () => {\n      onSelect(product.id, !selected);\n    };\n\n    useEffect(() => {\n      setRenameTitle(product.title);\n      setRenameColor(product.colorId.toString());\n    }, [product]);\n\n    return (\n      <article\n        data-id={product.id}\n        className=\"TodoInfo\"\n        key={product.id}\n      >\n\n        {\n          !isEdited\n            ? (\n              <section className=\"TodoInfo-section\">\n                <section className=\"TodoInfo__checkbox-section\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"btn-check\"\n                    id={`$btn-check-${product.id}-outlined`}\n                    onClick={changeSelect}\n                    checked={selected}\n                  />\n                  <label\n                    className=\"btn btn-outline-success btn-success-check\"\n                    htmlFor={`$btn-check-${product.id}-outlined`}\n                  >\n                    &#10003;\n                  </label>\n                  <h2\n                    className={classNames(\n                      'TodoInfo__title',\n                      {\n                        'TodoInfo__title-selected': selected,\n                      },\n                    )}\n                    style={currentColor && { color: currentColor.color }}\n                  >\n                    {product.title}\n                  </h2>\n                </section>\n                <section>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => onDelete(product.id)}\n                  >\n                    &#10005;\n                  </button>\n                  {\n                    !selected && (\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-outline-warning\"\n                        onClick={() => setEdited((prevState => !prevState))}\n                      >\n                        &#9998;\n                      </button>\n                    )\n                  }\n                </section>\n              </section>\n            ) : (\n              <form\n                onSubmit={onRenameSubmit}\n                method=\"GET\"\n                action=\"/api/users\"\n                className=\"TodoInfo-submitForm\"\n              >\n                <article className=\"TodoInfo-edit\">\n                  <section className=\"TodoInfo-edit__section\">\n                    <input\n                      className={classNames(\n                        'TodoInfo-edit__input',\n                        'form-control',\n                        {\n                          'error-border': isTitleTouched,\n                        },\n                      )}\n                      type=\"text\"\n                      value={renameTitle}\n                      onChange={addRenameTitle}\n                      onBlur={() => setTitleTouch(true)}\n                      maxLength={15}\n                    />\n\n                    <select\n                      className={classNames(\n                        'TodoInfo-edit__select',\n                        'form-control',\n                        {\n                          'error-border': isColorTouched,\n                        },\n                      )}\n                      value={renameColor}\n                      onChange={addRenameColor}\n                      onBlur={() => setColorTouch(true)}\n                    >\n                      <option\n                        value=\"\"\n                        disabled\n                      >\n                        Choose a color\n                      </option>\n                      {colors.map((currColor) => (\n                        <option\n                          key={currColor.id}\n                          value={currColor.id}\n                        >\n                          {currColor.color}\n                        </option>\n                      ))}\n                    </select>\n                  </section>\n\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-success btn-success-submit\"\n                  >\n                    &#10003;\n                  </button>\n                </article>\n              </form>\n            )\n        }\n      </article>\n    );\n  },\n);\n","import React, { useState } from 'react';\n\nimport './TodoFilter.scss';\nimport { Product } from '../types/Product';\n\ntype Props = {\n  products: Product[];\n  sortBySelect: () => void;\n  showAll: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  products,\n  sortBySelect,\n  showAll,\n}) => {\n  const [filterToggler, switchFilterToggler] = useState(false);\n  const [touchedSelect, setTouchSelect] = useState(false);\n\n  const productList = products.filter((product) => product.selected);\n\n  return (\n    <article className=\"TodoFilter\">\n      <button\n        type=\"button\"\n        className=\"TodoFilter__toggler\"\n        onClick={() => switchFilterToggler(prevState => !prevState)}\n      >\n        filter settings &#10000;\n      </button>\n      {\n        filterToggler && (\n          <section className=\"TodoFilter__sectionList\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success TodoFilter__button\"\n              onClick={() => {\n                sortBySelect();\n                setTouchSelect(true);\n              }}\n              disabled={\n                productList.length < 1\n                || products.length === productList.length\n              }\n            >\n              Show selected\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success TodoFilter__button\"\n              onClick={() => {\n                showAll();\n                setTouchSelect(false);\n              }}\n              disabled={!touchedSelect}\n            >\n              Show All\n            </button>\n          </section>\n        )\n      }\n    </article>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoSelect.scss';\n\nimport { Product } from '../../types/Product';\nimport { TodoFilter } from '../../TodoFilter/TodoFilter';\n\ntype Props = {\n  products: Product[];\n  changeAll: (selected: boolean) => void;\n  sortBySelect: () => void;\n  showAll: () => void;\n};\n\nexport const TodoSelect: React.FC<Props> = ({\n  products,\n  changeAll,\n  sortBySelect,\n  showAll,\n}) => {\n  const [productsList, setProductToList] = useState(products);\n\n  const fitleredProductsBySelect = productsList.filter((product) => (\n    product.selected\n  ));\n\n  useEffect(() => {\n    setProductToList(products.filter(\n      (product) => product.selected === true,\n    ));\n  }, [products]);\n\n  return (\n    <>\n      <article className=\"TodoSelect\">\n        <section className=\"TodoSelect__section\">\n          <section className=\"TodoSelect__selectButtons\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success\"\n              onClick={() => changeAll(true)}\n              disabled={\n                fitleredProductsBySelect.length === products.length\n              }\n            >\n              Select All\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-danger\"\n              onClick={() => changeAll(false)}\n              disabled={fitleredProductsBySelect.length < 1}\n            >\n              Remove select\n            </button>\n          </section>\n\n          <p\n            className={classNames(\n              'TodoSelect__title',\n              {\n                'TodoSelect__title--selected': productsList.length,\n              },\n            )}\n          >\n            {`Selected items: ${productsList.length}`}\n          </p>\n        </section>\n        <TodoFilter\n          products={products}\n          sortBySelect={sortBySelect}\n          showAll={showAll}\n        />\n      </article>\n    </>\n  );\n};\n","import React from 'react';\n\nimport './TodoList.scss';\n\nimport { Product } from '../../types/Product';\nimport { Color } from '../../types/Color';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoSelect } from '../TodoSelect/TodoSelect';\n\ntype Props = {\n  products: Product[];\n  colors: Color[];\n  onDelete: (productId: number) => void;\n  onRename: (productId: number, title: string, colorId: number) => void;\n  onSelect: (productId: number, selected: boolean) => void;\n  changeAll: (selected: boolean) => void;\n  sortBySelect: () => void;\n  showAll: () => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    products,\n    colors,\n    onDelete,\n    onRename,\n    onSelect,\n    changeAll,\n    sortBySelect,\n    showAll,\n  }) => {\n    return (\n      <section className=\"TodoList\">\n        <TodoSelect\n          products={products}\n          changeAll={changeAll}\n          sortBySelect={sortBySelect}\n          showAll={showAll}\n        />\n        {products.map((product) => (\n          <TodoInfo\n            key={product.id}\n            product={product}\n            colors={colors}\n            onDelete={onDelete}\n            onRename={onRename}\n            onSelect={onSelect}\n          />\n        ))}\n      </section>\n    );\n  },\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}