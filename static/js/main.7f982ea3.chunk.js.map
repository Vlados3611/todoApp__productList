{"version":3,"sources":["App.tsx","api/products.ts","api/colors.ts","components/TodoList/TodoListContext.tsx","ProductContext.tsx","components/TodoInfo/TodoInfo.tsx","TodoFilter/TodoFilter.tsx","components/TodoSelect/TodoSelect.tsx","components/TodoList/TodoList.tsx","index.tsx"],"names":["SortType","id","title","selected","colorId","color","TodoListContext","createContext","product","currentColor","colors","ProductContext","products","onDelete","onRename","onSelect","changeAll","sortBySelect","showAll","TodoInfo","React","memo","useContext","useState","renameTitle","setRenameTitle","toString","renameColor","setRenameColor","isEdited","setEdited","titleTouch","setTitleTouch","colorTouch","setColorTouch","isTitleTouched","length","isColorTouched","useEffect","className","onSubmit","event","preventDefault","Number","prevState","method","action","classNames","type","value","onChange","target","onBlur","maxLength","disabled","map","currColor","checked","htmlFor","style","onClick","TodoFilter","filterToggler","switchFilterToggler","touchedSelect","setTouchSelect","productList","filter","TodoSelect","productsList","setProductToList","fitleredProductsBySelect","TodoList","Provider","App","productsFromServer","setProducts","todoTitle","setTodoTitle","todoColor","setTodoColor","productTouch","NONE","sortType","setSortType","findColorById","colorsFromServer","find","undefined","useCallback","productId","state","changeAllProducts","sortBy","sortedProductList","SELECTED","getFilteredProducts","newProduct","Math","max","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f982ea3.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nimport classNames from 'classnames';\n\nimport './App.scss';\n\nimport productsFromServer from './api/products';\nimport colorsFromServer from './api/colors';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { Product } from './types/Product';\nimport { Color } from './types/Color';\n\nimport { ProductContext } from './ProductContext';\n\nenum SortType {\n  SELECTED,\n  NONE,\n}\n\nexport const App: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>(productsFromServer);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todoColor, setTodoColor] = useState('');\n  const [titleTouch, setTitleTouch] = useState(false);\n  const [productTouch, setColorTouch] = useState(false);\n\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const isTitleTouched = titleTouch && todoTitle.length < 1;\n  const isColorTouched = productTouch && todoColor.length < 1;\n\n  const findColorById = (colorId: number): Color | undefined => {\n    const foundColor = colorsFromServer.find((color) => (\n      color.id === colorId\n    ));\n\n    return foundColor || undefined;\n  };\n\n  const addTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n  };\n\n  const addTodoColor = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodoColor(event.target.value);\n  };\n\n  const removeTodoChanges = () => {\n    setTodoTitle('');\n    setTodoColor('');\n  };\n\n  const onAdd = (event: React.FormEvent): void => {\n    event.preventDefault();\n\n    const newProduct = {\n      id: Math.max(...products.map((product) => product.id)) + 1,\n      title: todoTitle,\n      selected: false,\n      colorId: Number(todoColor),\n      color: findColorById(Number(todoColor)),\n    };\n\n    if (todoTitle.length > 0 && todoColor.length > 0) {\n      setProducts((prevState: Product[]) => (\n        [...prevState, newProduct]\n      ));\n\n      removeTodoChanges();\n\n      setTitleTouch(false);\n      setColorTouch(false);\n    } else {\n      setTitleTouch(true);\n      setColorTouch(true);\n    }\n  };\n\n  const onDelete = useCallback(\n    (productId: number): void => {\n      setProducts((prevState) => prevState.filter((state) => (\n        state.id !== productId\n      )));\n    }, [],\n  );\n\n  const onRename = useCallback(\n    (\n      productId: number,\n      title: string,\n      colorId: number,\n    ): void => {\n      setProducts((prevState) => prevState.map((product) => {\n        if (product.id !== productId) {\n          return product;\n        }\n\n        return { ...product, title, colorId };\n      }));\n    }, [],\n  );\n\n  const onSelect = useCallback(\n    (productId: number, selected: boolean): void => {\n      setProducts((prevState: Product[]) => prevState.map(\n        (product) => {\n          if (product.id !== productId) {\n            return product;\n          }\n\n          return { ...product, selected };\n        },\n      ));\n    }, [],\n  );\n\n  const changeAllProducts = useCallback(\n    (selected: boolean) => {\n      setProducts((prevState: Product[]) => prevState.map(\n        (product: Product) => {\n          if (product.selected === selected) {\n            return product;\n          }\n\n          return { ...product, selected };\n        },\n      ));\n    }, [],\n  );\n\n  const getFilteredProducts = useCallback(\n    (\n      productList: Product[],\n      sortBy: SortType,\n    ): Product[] => {\n      const sortedProductList = productList.map((product: Product) => ({\n        ...product,\n        currentColor: findColorById(product.colorId),\n      }));\n\n      switch (sortBy) {\n        case SortType.SELECTED:\n          return sortedProductList.filter((product: Product) => (\n            product.selected\n          ));\n\n        default:\n          return sortedProductList;\n      }\n    }, [products, sortType],\n  );\n\n  const sortBySelect = () => {\n    setSortType(SortType.SELECTED);\n  };\n\n  const showAll = () => {\n    setSortType(SortType.NONE);\n  };\n\n  const fitleredProducts = getFilteredProducts(products, sortType);\n\n  const value = {\n    products: fitleredProducts,\n    colors: colorsFromServer,\n    onDelete,\n    onRename,\n    onSelect,\n    changeAll: changeAllProducts,\n    sortBySelect,\n    showAll,\n  };\n\n  return (\n    <div className=\"App\">\n      <form\n        className=\"App__form form\"\n        onSubmit={onAdd}\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <h1\n          className=\"App__title\"\n        >\n          Product List\n        </h1>\n\n        {isTitleTouched && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n        <div className=\"field\">\n          <input\n            className={classNames(\n              'form__textInput',\n              'form-control',\n              {\n                'error-border': isTitleTouched,\n              },\n            )}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={addTodoTitle}\n            onBlur={() => setTitleTouch(true)}\n            placeholder=\"Enter a title\"\n            maxLength={15}\n          />\n        </div>\n\n        {(isColorTouched) && (\n          <span className=\"error\">Please choose a color</span>\n        )}\n\n        <div className=\"field\">\n          <select\n            className={classNames(\n              'form__selectColor',\n              'form-control',\n              {\n                'error-border': isColorTouched,\n              },\n            )}\n            data-cy=\"userSelect\"\n            value={todoColor}\n            onChange={addTodoColor}\n            onBlur={() => setColorTouch(true)}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Choose a color\n            </option>\n\n            {colorsFromServer.map((currentColor) => (\n              <option\n                key={currentColor.id}\n                value={currentColor.id}\n              >\n                {currentColor.color}\n              </option>\n            ))}\n\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"btn btn-warning btn-todoAdd\"\n        >\n          Add\n        </button>\n      </form>\n\n      <ProductContext.Provider value={value}>\n        <TodoList />\n      </ProductContext.Provider>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'Apple',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 2,\n    title: 'Orange',\n    selected: false,\n    colorId: 1,\n  },\n  {\n    id: 3,\n    title: 'Steak',\n    selected: false,\n    colorId: 2,\n  },\n  {\n    id: 4,\n    title: 'Potato',\n    selected: false,\n    colorId: 3,\n  },\n  {\n    id: 5,\n    title: 'Stawberry',\n    selected: false,\n    colorId: 2,\n  },\n];\n","export default [\n  {\n    id: 1,\n    color: 'red',\n  },\n  {\n    id: 2,\n    color: 'blue',\n  },\n  {\n    id: 3,\n    color: 'green',\n  },\n];\n","import { createContext } from 'react';\n\nimport { Product } from '../../types/Product';\nimport { Color } from '../../types/Color';\n\ntype State = {\n  product: Product;\n  colors: Color[];\n};\n\nexport const TodoListContext = createContext<State>({\n  product: {\n    id: 0,\n    title: '',\n    selected: false,\n    colorId: 0,\n    currentColor: {\n      id: 0,\n      color: '',\n    },\n  },\n  colors: [],\n});\n","import { createContext } from 'react';\nimport { Product } from './types/Product';\nimport { Color } from './types/Color';\n\ntype State = {\n  products: Product[],\n  colors: Color[],\n  onDelete: (productId: number) => void;\n  onRename: (productId: number, title: string, colorId: number) => void;\n  onSelect: (productId: number, selected: boolean) => void;\n  changeAll: (selected: boolean) => void;\n  sortBySelect: () => void;\n  showAll: () => void;\n};\n\nexport const ProductContext = createContext<State>(\n  {\n    products: [],\n    colors: [],\n    onDelete() {},\n    onRename() {},\n    onSelect() {},\n    changeAll() {},\n    sortBySelect() {},\n    showAll() {},\n  },\n);\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoInfo.scss';\n\nimport { TodoListContext } from '../TodoList/TodoListContext';\nimport { ProductContext } from '../../ProductContext';\n\nexport const TodoInfo: React.FC = React.memo(\n  () => {\n    const { product, colors } = useContext(TodoListContext);\n    const {\n      id,\n      title,\n      selected,\n      colorId,\n      currentColor,\n    } = product;\n\n    const { onDelete, onRename, onSelect } = useContext(ProductContext);\n\n    const [renameTitle, setRenameTitle] = useState<string>(title);\n    const [renameColor, setRenameColor] = useState<string>(\n      colorId.toString(),\n    );\n    const [isEdited, setEdited] = useState(false);\n\n    const [titleTouch, setTitleTouch] = useState(false);\n    const [colorTouch, setColorTouch] = useState(false);\n\n    const isTitleTouched = titleTouch && renameTitle.length < 1;\n    const isColorTouched = colorTouch && renameColor.length < 1;\n\n    const resetAllChanges = () => {\n      setRenameTitle('');\n      setRenameColor('');\n    };\n\n    const onRenameSubmit = (event: React.FormEvent): void => {\n      event.preventDefault();\n\n      if (renameTitle.length > 0\n        && renameColor.length > 0) {\n        onRename(id, renameTitle, Number(renameColor));\n        setEdited(prevState => !prevState);\n\n        resetAllChanges();\n        setTitleTouch(false);\n        setColorTouch(false);\n      } else {\n        setTitleTouch(true);\n        setColorTouch(true);\n      }\n    };\n\n    const addRenameTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setRenameTitle(event.target.value);\n    };\n\n    const addRenameColor = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setRenameColor(event.target.value);\n    };\n\n    const changeSelect = () => {\n      onSelect(id, !selected);\n    };\n\n    useEffect(() => {\n      setRenameTitle(product.title);\n      setRenameColor(product.colorId.toString());\n    }, [product]);\n\n    return (\n      <article\n        data-id={id}\n        className=\"TodoInfo\"\n        key={id}\n      >\n\n        {\n          !isEdited\n            ? (\n              <section className=\"TodoInfo-section\">\n                <section className=\"TodoInfo__checkbox-section\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"btn-check\"\n                    id={`$btn-check-${id}-outlined`}\n                    onChange={changeSelect}\n                    checked={selected}\n                  />\n                  <label\n                    className=\"btn btn-outline-success btn-success-check\"\n                    htmlFor={`$btn-check-${id}-outlined`}\n                  >\n                    &#10003;\n                  </label>\n                  <h2\n                    className={classNames(\n                      'TodoInfo__title',\n                      {\n                        'TodoInfo__title-selected': selected,\n                      },\n                    )}\n                    style={currentColor && { color: currentColor.color }}\n                  >\n                    {title}\n                  </h2>\n                </section>\n                <section>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => onDelete(id)}\n                  >\n                    &#10005;\n                  </button>\n                  {\n                    !selected && (\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-outline-warning\"\n                        onClick={() => setEdited((prevState => !prevState))}\n                      >\n                        &#9998;\n                      </button>\n                    )\n                  }\n                </section>\n              </section>\n            ) : (\n              <form\n                onSubmit={onRenameSubmit}\n                method=\"GET\"\n                action=\"/api/users\"\n                className=\"TodoInfo-submitForm\"\n              >\n                <article className=\"TodoInfo-edit\">\n                  <section className=\"TodoInfo-edit__section\">\n                    <input\n                      className={classNames(\n                        'TodoInfo-edit__input',\n                        'form-control',\n                        {\n                          'error-border': isTitleTouched,\n                        },\n                      )}\n                      type=\"text\"\n                      value={renameTitle}\n                      onChange={addRenameTitle}\n                      onBlur={() => setTitleTouch(true)}\n                      maxLength={15}\n                    />\n\n                    <select\n                      className={classNames(\n                        'TodoInfo-edit__select',\n                        'form-control',\n                        {\n                          'error-border': isColorTouched,\n                        },\n                      )}\n                      value={renameColor}\n                      onChange={addRenameColor}\n                      onBlur={() => setColorTouch(true)}\n                    >\n                      <option\n                        value=\"\"\n                        disabled\n                      >\n                        Choose a color\n                      </option>\n                      {colors.map((currColor) => (\n                        <option\n                          key={currColor.id}\n                          value={currColor.id}\n                        >\n                          {currColor.color}\n                        </option>\n                      ))}\n                    </select>\n                  </section>\n\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-success btn-success-submit\"\n                  >\n                    &#10003;\n                  </button>\n                </article>\n              </form>\n            )\n        }\n      </article>\n    );\n  },\n);\n","import React, { useState, useContext } from 'react';\n\nimport './TodoFilter.scss';\n\nimport { ProductContext } from '../ProductContext';\n\nexport const TodoFilter: React.FC = () => {\n  const {\n    products,\n    sortBySelect,\n    showAll,\n  } = useContext(ProductContext);\n\n  const [filterToggler, switchFilterToggler] = useState(false);\n  const [touchedSelect, setTouchSelect] = useState(false);\n\n  const productList = products.filter((product) => product.selected);\n\n  return (\n    <article className=\"TodoFilter\">\n      <button\n        type=\"button\"\n        className=\"TodoFilter__toggler\"\n        onClick={() => switchFilterToggler(prevState => !prevState)}\n      >\n        filter settings &#10000;\n      </button>\n      {\n        filterToggler && (\n          <section className=\"TodoFilter__sectionList\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success TodoFilter__button\"\n              onClick={() => {\n                sortBySelect();\n                setTouchSelect(true);\n              }}\n              disabled={\n                productList.length < 1\n                || products.length === productList.length\n              }\n            >\n              Show selected\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success TodoFilter__button\"\n              onClick={() => {\n                showAll();\n                setTouchSelect(false);\n              }}\n              disabled={!touchedSelect}\n            >\n              Show All\n            </button>\n          </section>\n        )\n      }\n    </article>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport classNames from 'classnames';\n\nimport './TodoSelect.scss';\n\nimport { TodoFilter } from '../../TodoFilter/TodoFilter';\n\nimport { ProductContext } from '../../ProductContext';\n\nexport const TodoSelect: React.FC = () => {\n  const {\n    products,\n    changeAll,\n  } = useContext(ProductContext);\n\n  const [productsList, setProductToList] = useState(products);\n\n  const fitleredProductsBySelect = productsList.filter((product) => (\n    product.selected\n  ));\n\n  useEffect(() => {\n    setProductToList(products.filter(\n      (product) => product.selected === true,\n    ));\n  }, [products]);\n\n  return (\n    <>\n      <article className=\"TodoSelect\">\n        <section className=\"TodoSelect__section\">\n          <section className=\"TodoSelect__selectButtons\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success\"\n              onClick={() => {\n                changeAll(true);\n              }}\n              disabled={\n                fitleredProductsBySelect.length === products.length\n              }\n            >\n              Select All\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-danger\"\n              onClick={() => changeAll(false)}\n              disabled={fitleredProductsBySelect.length < 1}\n            >\n              Remove select\n            </button>\n          </section>\n\n          <p\n            className={classNames(\n              'TodoSelect__title',\n              {\n                'TodoSelect__title--selected': productsList.length,\n              },\n            )}\n          >\n            {`Selected items: ${productsList.length}`}\n          </p>\n        </section>\n\n        <TodoFilter />\n      </article>\n    </>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport './TodoList.scss';\n\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoSelect } from '../TodoSelect/TodoSelect';\n\nimport { ProductContext } from '../../ProductContext';\nimport { TodoListContext } from './TodoListContext';\n\nexport const TodoList: React.FC = React.memo(\n  () => {\n    const { products, colors } = useContext(ProductContext);\n\n    return (\n      <section className=\"TodoList\">\n        <TodoSelect />\n\n        {products.map((product) => (\n          <TodoListContext.Provider value={{ product, colors }}>\n            <TodoInfo\n              key={product.id}\n            />\n          </TodoListContext.Provider>\n        ))}\n      </section>\n    );\n  },\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}